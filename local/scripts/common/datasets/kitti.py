import numpy as np

from local.scripts.common.datasets.base import Dataset


class KITTI(Dataset):

    @property
    def v_offsets(self) -> list[float]:
        return [0.10517547, 0.10582327, 0.10652189, 0.10736023, 0.10795722, 0.10849071, 0.10912581, 0.10990064,
                0.11056115, 0.11125976, 0.11185676, 0.11236484, 0.11299995, 0.11357154, 0.11428286, 0.11493066,
                0.11568009, 0.11612466, 0.11673436, 0.11728055, 0.11796646, 0.11860156, 0.11924937, 0.11975745,
                0.12030364, 0.12081173, 0.12139602, 0.12212004, 0.12266623, 0.1231235, 0.12366969, 0.12427939,
                0.19555548, 0.19606993, 0.19639328, 0.19687834, 0.19737808, 0.19774553, 0.1981571, 0.19859804,
                0.19906839, 0.19950935, 0.19996502, 0.20039125, 0.20080282, 0.20127317, 0.20162594, 0.20212568,
                0.20250784, 0.20296349, 0.20337505, 0.20380131, 0.20427166, 0.20469791, 0.20506536, 0.20556513,
                0.20600607, 0.20646173, 0.20679979, 0.20729954, 0.20766701, 0.20821083, 0.20854891, 0.20900455]

    @property
    def v_angles(self) -> list[float]:
        return np.deg2rad(
            [-24.999201, -24.506605, -23.971016, -23.322384, -22.856577, -22.437605, -21.935509, -21.318125, -20.787691,
             -20.222572, -19.736372, -19.320236, -18.797075, -18.323431, -17.73037, -17.186821, -16.55401, -16.176632,
             -15.656734, -15.188733, -14.598064, -14.048302, -13.484814, -13.040989, -12.562096, -12.115005, -11.598996,
             -10.956945, -10.470731, -10.06249, -9.5735149, -9.0260181, -8.7114143, -8.3104696, -8.0580254, -7.6787701,
             -7.287312, -6.9990368, -6.675746, -6.3288889, -5.958395, -5.6106009, -5.2507782, -4.9137921, -4.5881028,
             -4.2155242, -3.935853, -3.5393341, -3.235882, -2.8738379, -2.546633, -2.207566, -1.833245, -1.49388, -1.201239,
             -0.80315, -0.45182899, -0.088762, 0.180617, 0.57880998, 0.871566, 1.304757, 1.573966, 1.9367]
        ).tolist()

    @property
    def h_offsets(self) -> list[float]:
        return [0.026, -0.026] * (64 // 2)

    @property
    def h_resolutions(self) -> list[float]:
        return [4000] * 64
